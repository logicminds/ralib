<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:charts="com.lmc.ralib.components.charts.*" xmlns:mx="library://ns.adobe.com/flex/mx"   >
	<fx:Declarations>
		
	</fx:Declarations>
	<fx:Metadata>
		[Style(name="chartCornerRadius", type="Number", format="Length", inherit="no", minValue="0.0")]
		[Style(name="chartPaddingTop", type="Number", format="Length", inherit="no", minValue="0.0")]
		[Style(name="chartPaddingBottom", type="Number", format="Length", inherit="no",  minValue="0.0")]
		[Style(name="chartPaddingLeft", type="Number", format="Length", inherit="no", minValue="0.0")]
		[Style(name="chartPaddingRight", type="Number", format="Length", inherit="no", minValue="0.0")]
		[Style(name="paddingLeft", type="Number", format="Length", inherit="no", minValue="20")]
		[Style(name="paddingRight", type="Number", format="Length", inherit="no", minValue="20")]
		[Style(name="fill", type="Number", format="Length", inherit="no", minValue="0.0")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.lmc.ralib.Events.ChangeViewEvent;
			import com.lmc.ralib.model.Bookmark;
			import com.lmc.ralib.model.Bookmarks;
			import com.lmc.ralib.model.DashModel;
			import com.lmc.ralib.view.FactSystemsView;
			import com.lmc.ralib.view.HostsView;
			
			import mx.charts.events.ChartItemEvent;
			import mx.charts.events.LegendMouseEvent;
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.PropertyChangeEvent;
			import mx.graphics.SolidColorStroke;
			
			import spark.primitives.Graphic;
			
			
			public var barHeight:int = 72;
			
		    [Bindable] private var piedata:ArrayCollection = new ArrayCollection();
			private var _dataProvider:DashModel;
			
			private var numhosts:int = 0;
			private var s:SolidColorStroke = new SolidColorStroke(0xFFFFFF, 1);
			public var bookmarks:Bookmarks;
			public var vPadding:int = 10;
			
			public function set dataProvider(model:DashModel):void{
					trace("puppetov model change");
					if (model){
						_dataProvider = model;
						numhosts = model.totalhosts;
					}
					createpiedata(_dataProvider);
				
					hosts.text="Hosts: " + numhosts;
			}
			public function refresh(usecache:Boolean=false):void{
				this.dispatchEvent(new Event("RefreshDashboardEvent"));
			}
			
			private function createpiedata(obj:DashModel):void{
				if (piedata.length > 0){
					piedata.removeAll();
				}
				if (obj.goodhosts > 0)
					this.piedata.addItem({name: 'Good Hosts', value: obj.goodhosts});
				
				if (obj.outofsync > 0)
					this.piedata.addItem({name: 'Out of Sync', value: obj.outofsync});
				
				if (obj.disabledhosts > 0)
					this.piedata.addItem({name: 'Disabled Hosts', value: obj.disabledhosts});
				
				if (obj.badhosts > 0)
					this.piedata.addItem({name: 'Bad Hosts', value: obj.badhosts});
				
				if (obj.activehosts > 0)
					this.piedata.addItem({name: 'Active Hosts', value: obj.activehosts});
				
			}
			private function resolveLabel(name:String):Bookmark{
				switch(name){
					case "Good Hosts":
						return bookmarks.findbyname("ok hosts");
						break;
					case "Out of Sync":
						return bookmarks.findbyname("out of sync");
						break;
					case "Disabled Hosts":
						return bookmarks.findbyname("disabled");
						break;
					case "Bad Hosts":
						return bookmarks.findbyname("error");
						break;
					case "Active Hosts":
						return bookmarks.findbyname("active");
						break;
				}
				return null;
			}
			private function displayWins(data:Object, field:String, index:Number, percentValue:Number):String {
				var temp:String= (" " + percentValue.toFixed(0));
				temp = temp.substr(0,6);
				  // return data.name + ": \n" + temp + "%\n (" + data.value + ")";
				   return  temp + "% (" + data.value + ")";
				
			}
			private function clickLegend(event:LegendMouseEvent):void{
				// will need to match label to bookmark and get the hosts
				//	event.item.label;
				var bookmark:Bookmark = resolveLabel(event.item.label);
				this.dispatchEvent(new ChangeViewEvent(ChangeViewEvent.LOAD_VIEW,HostsView,0,null,bookmark));
			}
			
			protected function dashchart_itemMouseDownHandler(event:ChartItemEvent):void
			{
				var bookmark:Bookmark  = resolveLabel(event.hitSet.shift().item.name);
				this.dispatchEvent(new ChangeViewEvent(ChangeViewEvent.LOAD_VIEW,HostsView,1,null,bookmark));
			}
			
		]]>
	</fx:Script>
	<s:Rect radiusX="6" radiusY="6" left="5" top="0" right="5" bottom="0"  >
		<s:fill>
			<s:SolidColor color="#2E2E2E" />
		</s:fill>
	</s:Rect>
	<s:VGroup 
		left="0" right="0" top="10" bottom="0" paddingLeft="10" paddingRight="10"
		paddingBottom="20" horizontalAlign="center" width="100%" height="100%"
		paddingTop="0"
		gap="12">
		<s:HGroup width="100%" horizontalAlign="center" >
			<s:Label fontWeight="bold" 
				 text="Puppet Clients Activity Overview"/>	
			</s:HGroup>

	 <s:HGroup width="100%"  horizontalAlign="left" >
			 <s:Label color="0xFFFFFF" textAlign="left" width="100%" id="hosts"
					  styleName="labelStyle" />
		</s:HGroup>
		<mx:PieChart id="dashchart"  width="100%" height="100%" itemMouseDown="dashchart_itemMouseDownHandler(event)" 
					 cacheAsBitmap="false" dataProvider="{piedata}"
					>
			<mx:series>
				<mx:PieSeries explodeRadius="0.02" nameField="name" labelPosition="callout" calloutGap="2" calloutStroke="{s}"
							  field="value" labelFunction="displayWins"/>
			</mx:series>
			
		</mx:PieChart>
    	
		<s:Scroller  width="100%"   contentBackgroundAlpha=".7" horizontalScrollPolicy="auto"  verticalScrollPolicy="off" >
			<s:HGroup width="100%"  clipAndEnableScrolling="true" 
					  horizontalAlign="center" >
				<mx:Legend id="legendchart" itemMouseDown="clickLegend(event)" styleName="mylegendStyle" color="#FFFFFF"  
						   direction="horizontal" dataProvider="{dashchart}"  />
			</s:HGroup>
			
		</s:Scroller> 
	</s:VGroup>
</s:Group>
