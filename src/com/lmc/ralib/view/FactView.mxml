<?xml version="1.0" encoding="utf-8"?>
<components:ViewBackBase xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" currentState="List"
		 xmlns:flexpad="com.flexpadmobile.*" creationComplete="viewbackbase1_creationCompleteHandler(event)"
		   viewActivate="init()" title="Fact View"
		  xmlns:lmc="components.*" xmlns:charts="com.lmc.ralib.components.charts.*" xmlns:components="com.lmc.ralib.components.*" 
		  >
	
	<components:states>
		<s:State name="List" />
		<s:State name="Graph" />
	</components:states>
	<fx:Script>
		<![CDATA[
			import com.google.analytics.AnalyticsTracker;
			import com.lmc.ralib.Events.CustomClickEvent;
			import com.lmc.ralib.Events.FactViewEvent;
			import com.lmc.ralib.Events.FilterListLayoutEvent;
			import com.lmc.ralib.components.FilterListlayout;
			
			import flash.events.KeyboardEvent;
			
			import mx.charts.LegendItem;
			import mx.collections.ArrayCollection;
			import mx.core.DPIClassification;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			import spark.components.Image;
			import spark.events.DropDownEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			import spark.events.ViewNavigatorEvent;
			public var hostgroups:Vector.<Object>; 
			public var usecache:Boolean = false;
			[Bindable] public var values:ArrayCollection;
			private var factname:String;
			public var query:String;
			//private var listpop:listpopup;
			[Bindable] private var menulist:ArrayCollection = new ArrayCollection(["List", "Graph"]);
			public var filtercallout:FilterListlayout = new FilterListlayout();
			
			
			protected function init():void
			{
				if (data.hasOwnProperty("hostgroups")){
					hostgroups = data.hostgroups;
					tags.removeAllTags();
					for each (var obj:Object in hostgroups){
						tags.addtag(obj.name, "hostgroup");
					}
				}
				else{
					hostgroups = new Vector.<Object>;
				}
				factname = data.fact.name;
				query = factname;
				viewfactchart.addEventListener(CustomClickEvent.FACTCHARTCLICKED, onChartClick);
				trace("Viewing fact: " + data.fact.name);
				
			}
			public override function backHandler(event:MouseEvent):void{
				super.backHandler(event);
			}
			
			private function onChartClick(event:CustomClickEvent):void{
				// turn given label into object in array
				var factitem:Object;

				if (event.selecteditem is LegendItem){
					for each (var obj:Object in list.dataProvider){
						if (obj.value == event.selecteditem.label){
							factitem = obj;	
						}
					}
					var value:String = event.selecteditem.toString();
				}
				else{
					factitem = event.selecteditem;
					var value:String = factitem.value.toString();
				}
				
				
				var hostquery:String;
				var key:String = data.fact.name;
				
				if (data.hostgroup){
					hostquery = "+hostgroup+%3D+" + data.hostgroup + "+%26+facts." + key + "+%3D++%22" + value + "%22";
					
				}
				else{
					hostquery = "+facts." + key + "+%3D++%22" + value + "%22";
					
				}
				data.isgraphvisible = viewfactchart.visible;
				data.hostgroups = hostgroups;
				navigator.pushView(FactSystemsView, {query:hostquery, hosts:factitem.hosts, 
							factname:data.fact.name, factvalue:factitem.value, factviewdata:data});
			}
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				var hostquery:String;
				var key:String = data.fact.name;
				var value:String = list.selectedItem.value;
				
				if (data.hostgroup){
					 hostquery = "+hostgroup+%3D+" + data.hostgroup + "+%26+facts." + key + "+%3D++%22" + value + "%22";

				}
				else{
					hostquery = "+facts." + key + "+%3D++%22" + value + "%22";

				}
				data.hostgroups = hostgroups;
				data.isgraphvisible = viewfactchart.visible;
				switch(list.selectedItems[0]){
					
					default:
						
						navigator.pushView(FactSystemsView, {query:hostquery, hosts:list.selectedItem.hosts, 
							factname:data.fact.name, factvalue:list.selectedItem.value,factviewdata:data});
						trace("Value: " + list.selectedItem);
						break;
				}
			
			}
			private function menuChange(event:*):void{
				if (listgraphbutton.isListState()){
					viewfactchart.visible = false;
					list.visible = true;
				}
				else{
					list.visible = false;
					viewfactchart.visible = true;
						
				}
			
			}
			
			protected function emailHandler(event:MouseEvent):void
			{
				dispatchEvent(new FactViewEvent(FactViewEvent.CREATE_FACT_EMAIL,null,data.fact.name, false, {hostgroups:hostgroups}));
			}
	
			private function openfilter(event:MouseEvent):void{
				addEventListener(FilterListLayoutEvent.CHANGE, calloutcloseHandler);
				dispatchEvent(new FilterListLayoutEvent(FilterListLayoutEvent.OPEN,hostgroups, 
					event.currentTarget as DisplayObjectContainer));
		
			}
			protected function calloutcloseHandler(event:FilterListLayoutEvent):void
			{
				removeEventListener(FilterListLayoutEvent.CHANGE, calloutcloseHandler);
				if (event.data){
					// user click ok and we pass the selected items from the list
					hostgroups = event.data;
					// add all the tags
					tags.removeAllTags();
					for each (var obj:Object in hostgroups){
						tags.addtag(obj.name, "hostgroup");
					}
					dispatchEvent(new FactViewEvent(FactViewEvent.FILTERHOSTGROUPS, hostgroups, data.fact.name,false));
				}
			}
			
			protected function bar_preinitializeHandler(event:FlexEvent):void
			{
				switch(FlexGlobals.topLevelApplication.runtimeDPI){
					case DPIClassification.DPI_160:
						bar.minHeight = 28;
						break;
					case DPIClassification.DPI_240:
						bar.minHeight = 36;
						break;
					case DPIClassification.DPI_320:
						bar.minHeight = 64;
						break;
				}				
			}
			private function onRefreshClick(event:MouseEvent):void{
				
				dispatchEvent(new FactViewEvent(FactViewEvent.FILTERHOSTGROUPS, hostgroups, data.fact.name,false));

			}
			
			protected function viewbackbase1_creationCompleteHandler(event:FlexEvent):void
			{
				if (navigator.poppedViewReturnedObject ){
					usecache = true;
					data = navigator.poppedViewReturnedObject.object;
					listgraphbutton.currentState = data.isgraphvisible ? "list" : "graph";
				}
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:MultiDPIBitmapSource id="filtericon"
								source160dpi="@Embed('assets/icons/filter24.png')"
								source240dpi="@Embed('assets/icons/filter32.png')"
								source320dpi="@Embed('assets/icons/filter48.png')" />	</fx:Declarations>
	
	
	
	<components:actionContent>
		<s:Button styleName="refreshButton" click="onRefreshClick(event)"  />
		<s:Spacer width="5" />
		<s:Button buttonMode="true" styleName="shareactionButton" click="emailHandler(event)" />
    </components:actionContent>
		
		<flexpad:BarGrey width="100%" top="0" id="bar" preinitialize="bar_preinitializeHandler(event)" >
			<flexpad:layout>
				<s:HorizontalLayout verticalAlign="middle" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" />
			</flexpad:layout>
			<s:HGroup width="100%" horizontalAlign="left">
				<s:Label text="{'Fact: ' + data.fact.name}" fontWeight="bold"  />

			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
				<components:ListGraphButton id="listgraphbutton" click="menuChange(event)" right="5" />
				<s:Spacer width="15" />
				<s:Image source="{filtericon}" buttonMode="true" id="filterbutton" click="openfilter(event)" />

			</s:HGroup>
		</flexpad:BarGrey>
	
	
	<!-- the list is too long because the height is the default -->
	<s:List id="list" width="100%" itemRenderer="com.lmc.ralib.renderers.FactItemsRenderer" dataProvider="{values}" 
			minHeight="20" maxHeight="{height - bar.height - bgroup.height}" top="{bar.height}"
							 change="list_changeHandler(event)" labelField="value"  />
		
	<charts:FactOverview id="viewfactchart" width="100%" bottom="{bgroup.height}" top="{bar.height + 5} "
					   dataProvider="{values}" visible="false"  />
	
	<s:HGroup width="100%" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5" bottom="0" id="bgroup" >
			<s:Scroller width="100%" verticalScrollPolicy="off"  >
				<components:TagGroup id="tags" width="100%"  contentBackgroundColor="0xFFFFFF" /> 
			</s:Scroller>
	</s:HGroup>

</components:ViewBackBase>
